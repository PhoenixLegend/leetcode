/*
 * @lc app=leetcode.cn id=122 lang=java
 *
 * [122] 买卖股票的最佳时机 II
 * 贪心算法与动态规划的不同在于它对每个子问题的解决方案都做出选择(总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解)，不能回退。动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能。
 * 从问题的某一初始解出发；while 能朝给定总目标前进一步 do，求出可行解的一个解元素；最后，由所有解元素组合成问题的一个可行解。
 * https://zh.wikipedia.org/wiki/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95
 * 这个题目有很强的误导性。题目说是要求找出“最佳时机”，下意识会让人理解为我一定要想121题一样找出最优的解，且是全局最优的解。然后就会陷入寻找“最佳”的误区。
 * 而且示例给的题目也貌似“选择了最佳”的结果。这是因为恰好题目的“局部最佳”和“全局最佳”是一致的。让人误认为我一定要找出最小的和最大的差值。
 * 
 * 1.贪心算法的最大特点就是只寻求局部的最佳情况，尽管这并不一定满足全局最佳。
 * 2.对于每天变化的股票而言，我只关心短期之内我能不能赚到钱，会不会亏钱。
 * 3.只要我低价买，高价卖，我就一定能赚。我不关心之后这支股票是不是会再涨。
 * 4.所以我只需要关心今天买入的价格是不是比昨天低，低我就买。买了之后，只要关心今天是不是比买入的价高，高我就卖。否则我就不买。那我一定稳赚。
 * 
 * ps:在真实的股市当中，贪心算法是一定亏本的。因为短期的收益非常少，且考虑到题目的条件是理想的情况，实际状况是每一笔交易都会有抽成。在《韭菜的自我修养》一书当中指出：“所以，韭菜想要翻身，说一千道一万，只有一条路可走：降低交易频次……降低降低再降低”。
 */

// @lc code=start
class Solution {
    public int maxProfit(int[] prices) {
        int rs = 0;
        if (prices.length <= 0) {
            return rs;
        }
        int buy = prices[0];
        for (int i = 1; i < prices.length; i++) {
            if (prices[i] < prices[i - 1]) {
                buy = prices[i];
            }
            if (prices[i] > buy) {
                rs = rs + prices[i] - buy;
                buy = prices[i];
            }
        }
        return rs;
    }
}
// @lc code=end
